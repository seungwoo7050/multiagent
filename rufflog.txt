src/core/mcp/api/websocket_adapter.py:36:17: F841 Local variable `message_to_send` is assigned to but never used
   |
34 |             serialized_data: bytes = serialize_context(context, format=target_format)
35 |             if target_format == SerializationFormat.JSON:
36 |                 message_to_send: Any = serialized_data.decode('utf-8') # ???
   |                 ^^^^^^^^^^^^^^^ F841
37 |                 try:
38 |                     message_dict = context.serialize()
   |
   = help: Remove assignment to unused variable `message_to_send`

src/core/registry.py:173:20: F821 Undefined name `get_current_time_ms`
    |
171 | def cleanup_unused_registries(min_idle_time_ms: int = 3600000) -> int:
172 |     """Remove registries that haven't been accessed in the specified time period."""
173 |     current_time = get_current_time_ms()
    |                    ^^^^^^^^^^^^^^^^^^^ F821
174 |     removed_count = 0
    |

src/core/worker_pool.py:263:51: F841 [*] Local variable `e` is assigned to but never used
    |
261 |                                 break
262 |             return results
263 |         except concurrent.futures.TimeoutError as e:
    |                                                   ^ F841
264 |             logger.warning(f'Map operation timed out after {timeout} seconds in pool {self.name}.')
265 |             completed_indices = {futures_map[f] for f in futures_map if f.done()}
    |
    = help: Remove assignment to unused variable `e`

src/core/worker_pool.py:323:9: F841 Local variable `effective_timeout` is assigned to but never used
    |
321 |         self._is_shutdown = True
322 |         logger.info(f'Shutting down thread worker pool: {self.name}')
323 |         effective_timeout: Optional[float] = timeout if timeout is not None else self.config.shutdown_timeout
    |         ^^^^^^^^^^^^^^^^^ F841
324 |         try:
325 |             if sys.version_info >= (3, 9):
    |
    = help: Remove assignment to unused variable `effective_timeout`

src/core/worker_pool.py:515:9: F841 Local variable `start_time` is assigned to but never used
    |
513 | …         raise WorkerPoolError(f"Function '{getattr(func, '__name__', '<unknown>')}' must be picklable for process pool map in {self…
514 | …     results: List[Union[R, Exception]] = []
515 | …     start_time: float = time.time()
    |       ^^^^^^^^^^ F841
516 | …     self._update_metrics(active_delta=len(items))
517 | …     metrics_manager.track_task('processing', increment=True, value=len(items))
    |
    = help: Remove assignment to unused variable `start_time`

src/core/worker_pool.py:825:13: F841 Local variable `config_obj` is assigned to but never used
    |
823 |         if key not in _worker_pools:
824 |             logger.info(f"Worker pool '{key}' not found in registry. Creating new instance...")
825 |             config_obj: Optional[AnyWorkerPoolConfig] = config
    |             ^^^^^^^^^^ F841
826 |             try:
827 |                 if pool_type_enum == WorkerPoolType.QUEUE_ASYNCIO:
    |
    = help: Remove assignment to unused variable `config_obj`

src/llm/adapters/anthropic.py:148:37: F821 Undefined name `asyncio`
    |
146 |         except aiohttp.ClientError as http_err:
147 |             error_code: ErrorCode = ErrorCode.NETWORK_ERROR
148 |             if isinstance(http_err, asyncio.TimeoutError):
    |                                     ^^^^^^^ F821
149 |                 error_code = ErrorCode.LLM_TIMEOUT
150 |             elif isinstance(http_err, aiohttp.ClientConnectionError):
    |

src/llm/adapters/gemini.py:369:37: F821 Undefined name `asyncio`
    |
367 |             error_code: ErrorCode = ErrorCode.NETWORK_ERROR
368 |             
369 |             if isinstance(http_err, asyncio.TimeoutError):
    |                                     ^^^^^^^ F821
370 |                 error_code = ErrorCode.LLM_TIMEOUT
371 |             elif isinstance(http_err, aiohttp.ClientConnectionError):
    |

src/llm/adapters/openai.py:208:37: F821 Undefined name `asyncio`
    |
206 |         except aiohttp.ClientError as http_err:
207 |             error_code: ErrorCode = ErrorCode.NETWORK_ERROR
208 |             if isinstance(http_err, asyncio.TimeoutError):
    |                                     ^^^^^^^ F821
209 |                 error_code = ErrorCode.LLM_TIMEOUT
210 |             elif isinstance(http_err, aiohttp.ClientConnectionError):
    |

src/llm/models.py:170:22: F821 Undefined name `Tuple`
    |
168 |     capabilities = original_info.get('capabilities', [])
169 |     original_token_limit = original_info.get('token_limit', 0)
170 |     candidates: List[Tuple[str, float]] = []
    |                      ^^^^^ F821
171 |     for candidate_name, info in _MODEL_REGISTRY.items():
172 |         if candidate_name == model_name:
    |

src/llm/parallel.py:29:14: F821 Undefined name `Set`
   |
27 |     results: List[Optional[Any]] = [None] * len(operations)
28 |     exceptions: List[Tuple[int, Exception]] = []
29 |     pending: Set[asyncio.Task[Any]] = set()
   |              ^^^ F821
30 |     start_time: float = time.monotonic()
31 |     deadline: float = start_time + timeout
   |

src/llm/parallel.py:50:19: F821 Undefined name `Set`
   |
48 |                 break
49 |             wait_time: float = min(remaining_time, max_wait_time)
50 |             done: Set[asyncio.Task[Any]]
   |                   ^^^ F821
51 |             pending: Set[asyncio.Task[Any]]
52 |             try:
   |

src/llm/parallel.py:51:22: F821 Undefined name `Set`
   |
49 |             wait_time: float = min(remaining_time, max_wait_time)
50 |             done: Set[asyncio.Task[Any]]
51 |             pending: Set[asyncio.Task[Any]]
   |                      ^^^ F821
52 |             try:
53 |                 done, pending = await asyncio.wait(pending, timeout=wait_time, return_when=asyncio.FIRST_COMPLETED)
   |

src/llm/parallel.py:249:34: F821 Undefined name `should_fallback_immediately`
    |
247 |             return (success_model, response)
248 |         except Exception as e:
249 |             immediate_fallback = should_fallback_immediately(e)
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ F821
250 |             if immediate_fallback:
251 |                 errors[model_name] = e
    |

src/llm/performance.py:139:1: E402 Module level import not at top of file
    |
137 |     except Exception as e:
138 |         logger.error(f'Failed to record LLM failure metric for model {model}: {e}', exc_info=True)
139 | from collections import deque
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
140 |
141 | from pydantic import BaseModel, ConfigDict, Field
    |

src/llm/performance.py:139:25: F811 [*] Redefinition of unused `deque` from line 2
    |
137 |     except Exception as e:
138 |         logger.error(f'Failed to record LLM failure metric for model {model}: {e}', exc_info=True)
139 | from collections import deque
    |                         ^^^^^ F811
140 |
141 | from pydantic import BaseModel, ConfigDict, Field
    |
    = help: Remove definition: `deque`

src/llm/performance.py:141:1: E402 Module level import not at top of file
    |
139 | from collections import deque
140 |
141 | from pydantic import BaseModel, ConfigDict, Field
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ E402
    |

src/llm/prompt_optimizer.py:28:25: F821 Undefined name `Callable`
   |
26 |         return prompt
27 |     logger.debug(f'Optimizing prompt: Current tokens={current_token_count}, Target tokens={target_token_count}')
28 |     optimizations: List[Callable[[str], str]] = [_remove_redundant_whitespace, _compress_repeated_formats, _simplify_urls]
   |                         ^^^^^^^^ F821
29 |     optimized_prompt = prompt
30 |     for i, optimize_func in enumerate(optimizations):
   |

src/memory/manager.py:886:1: E402 Module level import not at top of file
    |
884 | # manager.py 파일의 get_memory_manager 함수 수정
885 |
886 | import threading
    | ^^^^^^^^^^^^^^^^ E402
887 |
888 | from src.memory.redis_memory import \
    |

src/memory/manager.py:888:1: E402 Module level import not at top of file
    |
886 |   import threading
887 |
888 | / from src.memory.redis_memory import \
889 | |     RedisMemory  # backends 폴더가 아니라 src.memory 에서 바로 가져옴
    | |_______________^ E402
890 |
891 |   # --- 싱글톤 인스턴스 관리 (이전과 동일) ---
    |

src/memory/manager.py:921:42: F823 Local variable `BaseVectorStore` referenced before assignment
    |
920 |                 # 2. 벡터 저장소 백엔드 초기화 (수정됨)
921 |                 vector_backend: Optional[BaseVectorStore] = None
    |                                          ^^^^^^^^^^^^^^^ F823
922 |                 # settings.py의 VECTOR_DB_TYPE이 'none'이 아닐 때만 초기화 시도
923 |                 if settings.VECTOR_DB_TYPE != 'none':
    |

src/orchestration/orchestrator.py:192:9: F841 Local variable `events` is assigned to but never used
    |
190 |         plan = await self.memory_manager.load(key=plan_key, context_id=task_id, default=[])
191 |         scratchpad = await self.memory_manager.load(key=scratch_key, context_id=task_id, default=[])
192 |         events = await self.memory_manager.load(key=events_key, context_id=task_id, default=[])
    |         ^^^^^^ F841
193 |
194 |         # 단계 유효성 검사
    |
    = help: Remove assignment to unused variable `events`

src/orchestration/orchestrator.py:265:24: F821 Undefined name `get_connection_manager`
    |
263 |             logger.debug(f'Updated status for task {task_id} to {state.value}')
264 |             # WebSocket으로 실시간 브로드캐스트
265 |             conn_mgr = get_connection_manager()
    |                        ^^^^^^^^^^^^^^^^^^^^^^ F821
266 |             await conn_mgr.broadcast({'task_id': task_id, 'status': state.value}, task_id)
267 |         except Exception as e:
    |

src/orchestration/orchestrator.py:280:20: F821 Undefined name `get_connection_manager`
    |
278 |         await self.memory_manager.save(key=events_key, context_id=task_id, data=events)
279 |         # WebSocket 브로드캐스트
280 |         conn_mgr = get_connection_manager()
    |                    ^^^^^^^^^^^^^^^^^^^^^^ F821
281 |         await conn_mgr.broadcast(event, task_id)
    |

src/orchestration/scheduler.py:178:17: E722 Do not use bare `except`
    |
176 |                 try:
177 |                     await self._queue.put(item)
178 |                 except:
    |                 ^^^^^^ E722
179 |                     pass
    |

src/tools/runner.py:237:23: F821 Undefined name `e`
    |
235 |             # Create a task that will raise the exception when awaited
236 |             async def raise_exception_task():
237 |                 raise e
    |                       ^ F821
238 |                 
239 |             return asyncio.create_task(raise_exception_task(), name=f'tool_task_{tool_name}_error')
    |

Found 26 errors.
[*] 2 fixable with the `--fix` option (5 hidden fixes can be enabled with the `--unsafe-fixes` option).
